#!/usr/bin/python

from os import makedirs, path

base_dir = 'sources'
csv_dir  = '{}/csv'.format(base_dir)
ini_dir  = '{}/inifiles'.format(base_dir)
ini_defaults_dir = 'inifiles-defaults'


def usage():
    print('\nUsage: make_datafiles <experiment_id> [csv_file]')
    print(' experiment_id: unique experiment identifier\n')
    print(' csv_file: (optional) uses chosen csv file instead of default one'
          ' (i.e. file ''./sources/csv/experiment_id.cvs'' ')
    exit(0)

def CSV2dataini(csv_filename, data_dir):
    from common import load_modules_names
    import csv

    f_csv = open(csv_filename)
    csv_data = csv.reader(f_csv)

    find_module = load_modules_names('csv_parse')

    print('Reading CSV file... ', end="")

    csv_fields = next(csv_data)

    indexes = {field: csv_fields.index(field) for field in csv_fields}

    if not 'exp_type' in indexes:
        print("CSV file: missing experiment identifier: 'exp_type'")
        exit(1)
    exp_type_idx = indexes['exp_type']

    default_module = find_module('_default')
    data = {}

    for row in csv_data:
        experiment_type = row[exp_type_idx]
        module = find_module(experiment_type)

        if module.skip(experiment_type, row, indexes): continue

        ini_fields = []
        ini_fields.extend(csv_fields)
        if hasattr(module, 'experiment_identifiers'):
            exp_identifiers = module.experiment_identifiers(indexes)
        else:
            exp_identifiers = default_module.experiment_identifiers(indexes)
        for field in exp_identifiers:
            ini_fields.remove(field)

        if hasattr(module, 'read_CSV_row'):
            read_CSV_row = module.read_CSV_row
        else:
            read_CSV_row = default_module.read_CSV_row

        read_CSV_row(data, experiment_type, row, indexes, csv_fields, ini_fields)

    f_csv.close()

    print('Done.')

    print('\nCreating data inifiles...')

    for (experiment_id, exp_id_struct) in data.items():
        out_dir  = '{}/{}'.format(data_dir, experiment_id)

        print('    Processing experiment(s) with ID: %s' % experiment_id)

        if not path.exists(out_dir):
            makedirs(out_dir)

        if hasattr(module, 'write2ini'):
            write2ini = module.write2ini
        else:
            write2ini = default_module.write2ini

        write2ini(experiment_id, exp_id_struct, out_dir)

        print('    Processing experiments with ID %s finished.' % experiment_id)
    print('Finished.')

    return data

def process_input():
    from sys import argv as args

    args_no = len(args)
    if (args_no == 1) or ((args_no == 2)
                          and (args[1] == '-h' or args[1] == '--help')):
        usage()
    elif args_no == 2 or args_no == 3:
        exp_id = args[1]

        if args_no == 3:
            csv_file = args[2]
        else:
            csv_file = '{}/{}.csv'.format(csv_dir, exp_id)

        if not path.exists(csv_file):
            print('CSV data file ''%s'' does not exist.' % csv_file)
            exit(0)

        if not path.exists(ini_dir):
            makedirs(ini_dir)
    else:
        print('Bad input !')
        usage()

    return csv_file

if __name__ == "__main__":
    csv_file = process_input()
    csv_data = CSV2dataini(csv_file, ini_dir)
