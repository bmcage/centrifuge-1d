#!/usr/bin/python
from __future__ import print_function
from os import listdir
from shared import get_directories, yn_prompt
from config import ModulesManager, load_model
from optparse import OptionParser
from const import DEFAULTS_ININAME, CONSTANTS_ININAME

def list_experiments(verbose=True):
    from os import listdir

    print('\n'.join(sorted(listdir(
        get_directories('ini', 'base',
                        {key: '' for key in ['exp_id', 'exp_no',
                                             'mask']})))))

def list_modules(verbose=True):
    modman = ModulesManager()
    modman.echo(verbose)

def parse_input():

    usage_str = \
      ('\n  %prog [options] exp_ID first_experiment [last_experiment]'
       '\n\nArguments:'
       '\n  exp_ID:'
       '\n      ID identifying an experiment (see -l for all available '
       'experiments)'
       '\n  first_experiment:'
       '\n      the number of the first experiment in the \'exp_ID\' '
       'experiments serie'
       '\n  last_experiment:'
       '\n      all experiments between the \'first_experiment\' and '
       'the \'last_experiment\' (included) will be computed.'
       '\n      if it is not specified, computes only the \'first_experiment\'')
    optparser = OptionParser(usage=usage_str)
    optparser.add_option('-l', '--list', dest='list', action="store_true",
                         default=False,
                         help="Lists all available experiments")
    optparser.add_option('-m', '--mask', dest='mask', action="append",
                         metavar='MASK_NAME',
                         help=("Run given experiment with a mask MASK_NAME "
                               "file. The file \'MASK_NAME.ini\' in the masks "
                               "directory should exist. Option can be supplied "
                               "multiple times. In that case masks will be "
                               "applied in the order they were specified"))
    optparser.add_option('-c', '--compare', dest='compare_p', default=False,
                         action='store_true',
                         help=("Compare two configuration files."))
    optparser.add_option('-d', '--modules-list', dest='modules_list',
                         action="store_true", default=False,
                         help=("Get the list of all available centrifuge "
                               "modules. Using the -v option gives also "
                               "more detailed description of modules."))
    optparser.add_option('-p', '--print-config', dest='print_config_p',
                         action='store_true', default=False,
                         help=('Print the used configuration file for given '
                               'experiment and exit.'))
    optparser.add_option('-s', '--show', dest='show_p', default=False,
                         action='store_true',
                         help=("Show results if present. No computation is "
                               "peformed."))
    optparser.add_option('-v', '--verbose', dest='verbose',
                         action="store_true", default=False,
                         help="If possible, provide more detailed informations")

    (options, args) = optparser.parse_args()
    arg_len = len(args)
    if arg_len == 0:
        if options.list:
            list_experiments(options.verbose)
        elif options.modules_list:
            list_modules(options.verbose)
        else:
            optparser.print_help()
        exit(0)
    elif arg_len == 1:
        optparser.print_help()
        exit(0)
    elif options.list:
        print('Error: Flag ''-l'' cannot be used with an argument.')
        exit(1)

    optparser.destroy()

    try:
        exp_id = args[0]
        first_experiment = int(args[1])
        if len(args) == 3:
            last_experiment = int(args[2])
        else:
            last_experiment = first_experiment

        options.exp_id           = exp_id
        options.first_experiment = first_experiment
        options.last_experiment  = last_experiment

    except:

        raise ValueError('Input error: first and last experiment have to be'
                         ' integers. Wrong input: %s '
                         % args[1:])

    return options

def run_experiments(exp_id, first_experiment, last_experiment, mask,
                    verbose=True, print_cfg_only=False):

    if verbose:
        print('\n\n GENERAL experiments informations'
              '\n---------------------------------------------------------'
              '\n ID              : %s'
              '\n First experiment: %s'
              '\n Last  experiment: %s'
              '\n---------------------------------------------------------'
              % (exp_id, first_experiment, last_experiment))

    if print_cfg_only:
        modman = None
    else:
        modman = ModulesManager()

    for exp_no in range(first_experiment, last_experiment+1):
        if verbose:
            header = ("Executing experiment {} number {:d}."
                      "".format(exp_id, exp_no))
            print('\n', len(header) * '=', '\n', header,
                  '\n', len(header) * '=')

        experiment_info =  {'exp_id': exp_id, 'exp_no': exp_no,
                            'mask': mask}

        model = load_model(experiment_info, display_only=print_cfg_only,
                           modman = modman)

        if print_cfg_only: continue

        solver_module = modman.find_module(model.exp_type, submodule='run')

        solver_module.run(model)

def iterate_value(arg):

    if type(arg) in [list, tuple]:
        for value in arg:
            yield value
    elif type(arg) == dict:
        for (key, value) in arg.items():
            # dirty hack: we assume that only dict of list value is
            # 'inv_init_params', so the value is (init, [range])
            if type(value) in [tuple, list]:
                yield key + ': ' + str(value[0])
            else:
                yield key + ': ' + str(value)
    else:
        yield arg

    while True:
        yield ''

def compare2configs(options):
    print('Add information for the second configuration file:')
    exp_id2  = input('Experiment ID  : ').strip()
    exp_no2  = input('Experiment No. : ').strip()
    if len(options.mask) > 1:
        mask2 = options.mask[1]
    else:
        mask2    = input('Mask (optional): ').strip()

    exp_info1 ={'exp_id': options.exp_id, 'exp_no': options.first_experiment,
                'mask': options.mask[0]}
    exp_info2 ={'exp_id': exp_id2, 'exp_no': int(exp_no2), 'mask': mask2}

    (cfg1, const_cfg1) = load_configuration(experiment_info1)
    (cfg2, const_cfg2) = load_configuration(experiment_info2)

    all_parameters = sorted(set(cfg1.list_options() + cfg2.list_options()))

    param_max_length = 15
    value_max_length = 20
    fstring = (' {:' + str(param_max_length) +'} | {:'
               + str(value_max_length) +'} | {:'
               + str(value_max_length) + '}')
    print('\n', (param_max_length + 2*value_max_length + 6) * '-')
    print(fstring.format('Option name', '1. config', '2. config'),
          '\n', (param_max_length + 2*value_max_length + 6) * '-')

    for parameter in all_parameters:
        v1 = cfg1.get_value(parameter, not_found='')
        v2 = cfg2.get_value(parameter, not_found='')

        if not v1 == v2:
            v1_iter = iterate_value(v1)
            v2_iter = iterate_value(v2)

            if len(parameter) > param_max_length:
                parameter = parameter[:param_max_length]
            print(fstring.format(parameter, next(v1_iter), next(v2_iter)))

            while True:
                v1_value = next(v1_iter)
                v2_value = next(v2_iter)
                if (v1_value == '') and (v2_value == ''): break

                print(fstring.format('', v1_value, v2_value))



if __name__ == "__main__":
    options = parse_input()

    if options.show_p:
        from modules.shared.show import show_results

        experiment_info =  \
          {'exp_id': options.exp_id, 'exp_no': options.first_experiment,
           'mask': options.mask}

        show_results(experiment_info)

    elif options.compare_p:
        compare2configs(options)
    else:
        print_cfg_only = options.print_config_p
        run_experiments(options.exp_id, options.first_experiment,
                        options.last_experiment, options.mask,
                        verbose=(not print_cfg_only),
                        print_cfg_only=print_cfg_only)
