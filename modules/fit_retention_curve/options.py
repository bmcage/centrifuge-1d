PARENTAL_MODULES = []

def non_optimized_parameters(cfg):
    init_params = cfg.get_value('inv_init_params')
    result = []
    for name in ['theta_s', 'theta_r', 'n', 'gamma']:
        if not name in init_params: result.append(name)

    return result

CONFIG_OPTIONS = ['exp_type', 'g', 'p', 'theta', 'inv_init_params',
                  ('rho', 1.0), 'show_figures',
                  non_optimized_parameters,
                  ('sample_id', None), ('wl_out1', None),
                  ('measurements_filter', None),
                  ('params_ref', None),
                  ('verbosity', 1),
                  # solver options
                  ('epsfcn', 1e-5), ('factor', 0.1),
                  ('xtol', 1.49012e-8), ('ftol', 1.49012e-8),
                  # output options
                  ('save_data', True),
                  # options generated by mkini
                  ('measurements_length', -1)]

OPTIONS_ITERABLE_LISTS = []

EXCLUDE_FROM_MODEL = ['measurements_length', 'measurements_filter']

INTERNAL_OPTIONS = ['h', 'separate_figures']

def check_cfg(cfg):
    return True

def filter_measurements(cfg, measurements):
    fltr = cfg.get_value('measurements_filter')

    if not fltr: return

    for (name, value) in cfg.iterate_values():
        if (not type(value) in [list, tuple]) or (not name in measurements):
             continue

        filtered_value = []
        for (v, keep_p) in zip(value, fltr):
            if keep_p: filtered_value.append(v)

        print('name:', name, '\nvalue:', value, 'fv:', filtered_value,
              '\nfilter:', fltr)
        cfg.set_value(name, filtered_value)

def adjust_cfg(cfg):
    filter_measurements(cfg, ['theta', 'p'])
    cfg.set_value('separate_figures', True)
